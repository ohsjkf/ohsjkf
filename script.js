const game = {
    money: 0,
    clickPower: 1,
    winCount: 0,
    maxWins: 10,

    businesses: [
        { name: "–ö–∞—Ñ–µ ¬´–£ –•–æ–º—ã¬ª", price: 100, income: 10, owned: false },
        { name: "–ó–æ–æ–ø–∞—Ä–∫ –•–æ–º—è–∫–æ–≤", price: 1000, income: 75, owned: false },
        { name: "–•–æ–º—è—á—å—è –∫–∞—á–∞–ª–∫–∞", price: 5000, income: 300, owned: false },
        { name: "–ê–ó–° ¬´–•–æ–º—è–∫¬ª", price: 10000, income: 500, owned: false },
        { name: "–®–∫–æ–ª–∞ ¬´–•–û–ú–ê—Å–∞–ø–∏–µ–Ω—Å¬ª", price: 50000, income: 2000, owned: false },
        { name: "$HMSTR", price: 75000, income: 3000, owned: false, warning: "–¢—ã –¥—É—Ä–∞–∫? –ù–µ —Å—Ç–æ–∏—Ç —ç—Ç–æ –ø–æ–∫—É–ø–∞—Ç—å!" },
        { name: "–ê–≤—Ç–æ—Å–∞–ª–æ–Ω ¬´–ù–∞ —Ö–æ–º—è–∫–µ¬ª", price: 100000, income: 3500, owned: false },
        { name: "–ò–≥—Ä–∞ ¬´Hamster Combat¬ª", price: 250000, income: 7500, owned: false }
    ],

    earnMoney: function () {
        this.money += this.clickPower;
        this.updateUI();
    },

    buyBusiness: function (index) {
        let business = this.businesses[index];
        if (business.owned || business.price > this.money) return;

        if (business.warning) {
            alert(business.warning);
            return;
        }

        this.money -= business.price;
        business.owned = true;
        this.updateUI();
    },

    updateUI: function () {
        document.getElementById("money").textContent = this.money;
        document.getElementById("click-power").textContent = this.clickPower;
        document.getElementById("click-button").textContent = `+${this.clickPower}`;

        let container = document.getElementById("business-container");
        container.innerHTML = "";
        this.businesses.forEach((biz, index) => {
            let div = document.createElement("div");
            div.className = "business-card";
            div.innerHTML = `
                <h3>${biz.name}</h3>
                <p>üí∞ –¶–µ–Ω–∞: ${biz.price}</p>
                <p>üìà –î–æ—Ö–æ–¥: ${biz.income} –≤ —Å–µ–∫—É–Ω–¥—É</p>
                ${biz.owned ? "<p style='color:green;'>‚úÖ –ö—É–ø–ª–µ–Ω–æ</p>" : `<button onclick="game.buyBusiness(${index})">–ö—É–ø–∏—Ç—å</button>`}
            `;
            container.appendChild(div);
        });
    },

    startIncome: function () {
        setInterval(() => {
            this.businesses.forEach(biz => {
                if (biz.owned) this.money += biz.income;
            });
            this.updateUI();
        }, 1000);
    }
};

document.getElementById("click-button").addEventListener("click", () => game.earnMoney());

game.updateUI();
game.startIncome();

// PVP-–ë–û–ò
const pvpGame = {
    playerHP: 100,
    botHP: 100,
    attackPower: 10,
    botMoves: ["–ê—Ç–∞–∫–∞", "–ó–∞—â–∏—Ç–∞", "–©–µ–ª–∫–Ω—É—Ç—å –∑—É–±–∞–º–∏", "–£–ø–∞—Å—Ç—å"],
    playerTurn: true,
    botBlocking: false,

    startBattle: function () {
        this.playerHP = 100;
        this.botHP = 100;
        this.playerTurn = true;
        this.botBlocking = false;
        document.getElementById("battle-container").style.display = "block";
        document.getElementById("battle-log").innerHTML = "";
        this.updateBattleUI();
    },

    playerAttackAction: function () {
        if (!this.playerTurn) return;

        if (Math.random() < 0.1) {
            this.logBattle("üêπ –•–æ–º—è–∫ —É–ø–∞–ª...");
            this.endTurn();
            return;
        }

        if (this.botBlocking) {
            this.logBattle("üõ°Ô∏è –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —Ç–≤–æ–π —É–¥–∞—Ä!");
        } else {
            this.botHP -= this.attackPower;
            this.logBattle("‚öîÔ∏è –¢—ã –∞—Ç–∞–∫–æ–≤–∞–ª –±–æ—Ç–∞!");
        }

        this.endTurn();
    },

    playerSpecialAction: function (action) {
        if (!this.playerTurn) return;

        if (action === "–©–µ–ª–∫–Ω—É—Ç—å –∑—É–±–∞–º–∏") {
            this.attackPower += 5;
            this.logBattle("üêπ –¢—ã —â–µ–ª–∫–Ω—É–ª –∑—É–±–∞–º–∏! –£—Ä–æ–Ω —É–≤–µ–ª–∏—á–µ–Ω.");
        } else if (action === "–í—ã—Ç–∞—â–∏—Ç—å –∫–æ–≥—Ç–∏") {
            if (this.botBlocking) {
                this.logBattle("üõ°Ô∏è –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —Ç–≤–æ–∏ –∫–æ–≥—Ç–∏!");
            } else {
                this.botHP -= 15;
                this.logBattle("üêæ –¢—ã –≤—ã—Ç–∞—â–∏–ª –∫–æ–≥—Ç–∏ –∏ –Ω–∞–Ω–µ—Å —É—Ä–æ–Ω!");
            }
        } else if (action === "–°–¥–∞—Ç—å—Å—è") {
            alert("‚ùå –•–æ–º—è–∫–∏ –Ω–µ —Å–¥–∞—é—Ç—Å—è!");
            return;
        }

        this.endTurn();
    },

    endTurn: function () {
        this.playerTurn = false;
        setTimeout(() => this.botTurn(), 2000);
    },

    botTurn: function () {
        let move = this.botMoves[Math.floor(Math.random() * this.botMoves.length)];
        this.botBlocking = false;

        if (move === "–ê—Ç–∞–∫–∞") {
            this.playerHP -= 10;
            this.logBattle("ü§ñ –•–û–ú–û-–ë–æ—Ç –∞—Ç–∞–∫–æ–≤–∞–ª!");
        } else if (move === "–ó–∞—â–∏—Ç–∞") {
            this.botBlocking = true;
            this.logBattle("ü§ñ –•–û–ú–û-–ë–æ—Ç –≤—Å—Ç–∞–ª –≤ –±–ª–æ–∫!");
        } else if (move === "–©–µ–ª–∫–Ω—É—Ç—å –∑—É–±–∞–º–∏") {
            this.attackPower += 5;
            this.logBattle("ü§ñ –•–û–ú–û-–ë–æ—Ç —â–µ–ª–∫–Ω—É–ª –∑—É–±–∞–º–∏, –µ–≥–æ –∞—Ç–∞–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞!");
        } else if (move === "–£–ø–∞—Å—Ç—å") {
            this.logBattle("ü§ñ –•–û–ú–û-–ë–æ—Ç —É–ø–∞–ª...");
        }

        this.playerTurn = true;
        this.updateBattleUI();
    },

    logBattle: function (message) {
        let log = document.getElementById("battle-log");
        let newMessage = document.createElement("p");
        newMessage.textContent = message;
        log.appendChild(newMessage);
    },

    updateBattleUI: function () {
        document.getElementById("player-hp").textContent = this.playerHP;
        document.getElementById("bot-hp").textContent = this.botHP;

        if (this.playerHP <= 0) {
            this.logBattle("‚ùå –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!");
            document.getElementById("battle-container").style.display = "none";
        } else if (this.botHP <= 0) {
            this.logBattle("üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª!");
            
            if (game.winCount < game.maxWins) {
                game.winCount++;
                game.clickPower *= 2;
                this.logBattle(`‚ö° –î–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω –≤ 2 —Ä–∞–∑–∞! (–ü–æ–±–µ–¥: ${game.winCount}/${game.maxWins})`);
            } else {
                this.logBattle("üîù –¢—ã –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±—É—Å—Ç–∞ –∑–∞ –ø–æ–±–µ–¥—ã!");
            }

            game.updateUI();
            document.getElementById("battle-container").style.display = "none";
        }
    }
};

// –ö–Ω–æ–ø–∫–∏ –±–æ—è
document.getElementById("attack-button").addEventListener("click", () => pvpGame.playerAttackAction());
document.getElementById("bite-button").addEventListener("click", () => pvpGame.playerSpecialAction("–©–µ–ª–∫–Ω—É—Ç—å –∑—É–±–∞–º–∏"));
document.getElementById("claws-button").addEventListener("click", () => pvpGame.playerSpecialAction("–í—ã—Ç–∞—â–∏—Ç—å –∫–æ–≥—Ç–∏"));
document.getElementById("surrender-button").addEventListener("click", () => pvpGame.playerSpecialAction("–°–¥–∞—Ç—å—Å—è"));
document.getElementById("start-battle-button").addEventListener("click", () => pvpGame.startBattle());
