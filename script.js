class Game {
    constructor() {
        this.money = 0;
        this.clickPower = 1;
        this.businesses = [
            { name: "–ö–∞—Ñ–µ ¬´–£ –•–æ–º—ã¬ª", cost: 100, income: 10 },
            { name: "–ó–æ–æ–ø–∞—Ä–∫ –•–æ–º—è–∫–æ–≤", cost: 1000, income: 75 },
            { name: "–•–æ–º—è—á—å—è –∫–∞—á–∞–ª–∫–∞", cost: 5000, income: 300 },
            { name: "–ê–ó–° ¬´–•–æ–º—è–∫¬ª", cost: 10000, income: 500 }, // –í —á–∞—Å, –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ –≤ —Å–µ–∫—É–Ω–¥—ã
            { name: "–®–∫–æ–ª–∞ ¬´–•–æ–º–∞ —Å–∞–ø–∏–µ–Ω—Å¬ª", cost: 50000, income: 2000 },
            { name: "$hmstr", cost: 75000, income: 3000, special: true },
            { name: "–ê–≤—Ç–æ—Å–∞–ª–æ–Ω ¬´–ù–∞ —Ö–æ–º—è–∫–µ¬ª", cost: 100000, income: 3500 },
            { name: "–ò–≥—Ä–∞ ¬´Hamster Combat¬ª", cost: 250000, income: 7500 }
        ];
        this.updateUI();
    }

    earnMoney() {
        this.money += this.clickPower;
        this.updateUI();
    }

    buyBusiness(index) {
        let business = this.businesses[index];

        if (business.special) {
            alert("–¢—ã –¥—É—Ä–∞–∫? –ù–µ —Å—Ç–æ–∏—Ç —ç—Ç–æ –ø–æ–∫—É–ø–∞—Ç—å.");
            return;
        }

        if (this.money >= business.cost) {
            this.money -= business.cost;
            business.income += Math.floor(business.income * 0.2);
            this.updateUI();
        }
    }

    updateUI() {
        document.getElementById("money").innerText = this.money;
        document.getElementById("click-power").innerText = this.clickPower;
        this.updateBusinesses();
    }

    updateBusinesses() {
        let container = document.getElementById("business-container");
        container.innerHTML = "";
        this.businesses.forEach((business, index) => {
            let div = document.createElement("div");
            div.classList.add("business-card");
            div.innerHTML = `
                <h3>${business.name}</h3>
                <p>üí∞ –ü—Ä–∏–±—ã–ª—å: ${business.income.toFixed(2)}/—Å–µ–∫</p>
                <button onclick="game.buyBusiness(${index})">–ö—É–ø–∏—Ç—å –∑–∞ ${business.cost} –º–æ–Ω–µ—Ç</button>
            `;
            container.appendChild(div);
        });
    }
}

class PvPGame {
    constructor() {
        this.playerHP = 100;
        this.botHP = 100;
        this.playerAttack = 10;
        this.botAttack = 8;
        this.botBlockChance = 0.3;
        this.playerBlockChance = 0.2;
        this.criticalHitChance = 0.1;
        this.damageBoost = 1;
    }

    startBattle() {
        document.getElementById("battle-container").style.display = "block";
        document.getElementById("start-battle").style.display = "none";
        document.getElementById("click-button").style.display = "none";
        document.getElementById("business-container").style.display = "none";
        game.updateUI();
    }

    playerAttackAction() {
        if (Math.random() < 0.1) {
            alert("–•–æ–º—è–∫ —É–ø–∞–ª!");
            this.botTurn();
            return;
        }

        let damage = this.playerAttack * this.damageBoost;
        if (Math.random() < this.criticalHitChance) {
            damage *= 2;
            alert("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä! –£—Ä–æ–Ω —É–¥–≤–æ–µ–Ω!");
        }

        if (Math.random() < this.botBlockChance) {
            alert("üõ°Ô∏è –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —É–¥–∞—Ä!");
        } else {
            this.botHP -= damage;
            alert(`–¢—ã —É–¥–∞—Ä–∏–ª –±–æ—Ç–∞ –Ω–∞ ${damage} —É—Ä–æ–Ω–∞!`);
        }
        this.damageBoost = 1; // –°–±—Ä–æ—Å –±—É—Å—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞—Ä–∞
        this.checkGameOver();
        this.botTurn();
    }

    biteAction() {
        this.damageBoost += 0.5;
        alert("–¢—ã –Ω–∞—Ç–æ—á–∏–ª –∑—É–±—ã! –°–ª–µ–¥—É—é—â–∞—è –∞—Ç–∞–∫–∞ –±—É–¥–µ—Ç —Å–∏–ª—å–Ω–µ–µ.");
        this.botTurn();
    }

    clawAction() {
        this.botBlockChance -= 0.1;
        alert("–¢—ã –ø–æ—Ü–∞—Ä–∞–ø–∞–ª –±–æ—Ç–∞! –¢–µ–ø–µ—Ä—å –µ–º—É —Å–ª–æ–∂–Ω–µ–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞—Ç–∞–∫–∏.");
        this.botTurn();
    }

    botTurn() {
        if (Math.random() < this.playerBlockChance) {
            alert("üõ°Ô∏è –¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞—Ç–∞–∫—É –±–æ—Ç–∞!");
        } else {
            this.playerHP -= this.botAttack;
            alert(`–ë–æ—Ç –∞—Ç–∞–∫–æ–≤–∞–ª –Ω–∞ ${this.botAttack} —É—Ä–æ–Ω–∞!`);
        }
        this.checkGameOver();
    }

    surrender() {
        alert("–•–æ–º—è–∫–∏ –Ω–µ —Å–¥–∞—é—Ç—Å—è!");
        this.botTurn();
    }

    checkGameOver() {
        document.getElementById("player-hp").innerText = this.playerHP;
        document.getElementById("bot-hp").innerText = this.botHP;

        if (this.botHP <= 0) {
            alert("–¢—ã –ø–æ–±–µ–¥–∏–ª! –î–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω –≤ 2 —Ä–∞–∑–∞.");
            game.clickPower *= 2;
            this.resetGame();
        } else if (this.playerHP <= 0) {
            alert("–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!");
            this.resetGame();
        }
    }

    resetGame() {
        this.playerHP = 100;
        this.botHP = 100;
        document.getElementById("battle-container").style.display = "none";
        document.getElementById("start-battle").style.display = "block";
        document.getElementById("click-button").style.display = "block";
        document.getElementById("business-container").style.display = "block";
        game.updateUI();
    }
}

const game = new Game();
const pvpGame = new PvPGame();
