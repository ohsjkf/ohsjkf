class Game {
    constructor() {
        this.money = 0;
        this.clickPower = 1;
        this.businesses = [
            { name: "–ö–∞—Ñ–µ ¬´–£ –•–æ–º—ã¬ª", price: 100, income: 10 },
            { name: "–ó–æ–æ–ø–∞—Ä–∫ –•–æ–º—è–∫–æ–≤", price: 1000, income: 75 },
            { name: "–•–æ–º—è—á—å—è –∫–∞—á–∞–ª–∫–∞", price: 5000, income: 300 },
            { name: "–ê–ó–° ¬´–•–æ–º—è–∫¬ª", price: 10000, income: 500 },
            { name: "–®–∫–æ–ª–∞ ¬´–•–û–ú–ê—Å–∞–ø–∏–µ–Ω—Å¬ª", price: 50000, income: 2000 },
            { name: "$HMSTR", price: 75000, income: 3000, warning: "–¢—ã –¥—É—Ä–∞–∫? –ù–µ —Å—Ç–æ–∏—Ç —ç—Ç–æ –ø–æ–∫—É–ø–∞—Ç—å!" },
            { name: "–ê–≤—Ç–æ—Å–∞–ª–æ–Ω ¬´–ù–∞ —Ö–æ–º—è–∫–µ¬ª", price: 100000, income: 3500 },
            { name: "–ò–≥—Ä–∞ ¬´Hamster Combat¬ª", price: 250000, income: 7500 }
        ];
        this.fightWins = 0;
        this.init();
    }

    init() {
        this.updateUI();
        this.displayBusinesses();
        setInterval(() => this.passiveIncome(), 1000);
    }

    earnMoney() {
        this.money += this.clickPower;
        this.updateUI();
    }

    passiveIncome() {
        this.businesses.forEach(biz => {
            if (biz.owned) this.money += biz.income;
        });
        this.updateUI();
    }

    buyBusiness(index) {
        let biz = this.businesses[index];
        if (this.money >= biz.price) {
            this.money -= biz.price;
            biz.owned = true;
            this.updateUI();
            this.displayBusinesses();
            if (biz.warning) alert(biz.warning);
        }
    }

    updateUI() {
        document.getElementById("money").textContent = this.money;
        document.getElementById("click-power").textContent = this.clickPower;
    }

    displayBusinesses() {
        let container = document.getElementById("business-container");
        container.innerHTML = "";
        this.businesses.forEach((biz, index) => {
            if (!biz.owned) {
                let card = document.createElement("div");
                card.classList.add("business-card");
                card.innerHTML = `<h3>${biz.name}</h3>
                                  <p>üí∞ –¶–µ–Ω–∞: ${biz.price}</p>
                                  <p>üìà –î–æ—Ö–æ–¥: ${biz.income}/—Å–µ–∫</p>
                                  <button onclick="game.buyBusiness(${index})">–ö—É–ø–∏—Ç—å</button>`;
                container.appendChild(card);
            }
        });
    }
}

class PvpGame {
    constructor() {
        this.playerHP = 100;
        this.botHP = 100;
        this.playerDamageBoost = 1;
        this.botBlockChance = 0.2;
        this.isPlayerTurn = true;
        this.init();
    }

    init() {
        document.getElementById("battle-container").style.display = "none";
    }

    startBattle() {
        document.getElementById("battle-container").style.display = "block";
        document.getElementById("game-title").style.display = "none";
        document.getElementById("balance-display").style.display = "none";
        document.getElementById("click-button").style.display = "none";
        document.getElementById("businesses-title").style.display = "none";
        document.getElementById("business-container").style.display = "none";
        document.getElementById("start-battle").style.display = "none";

        this.playerHP = 100;
        this.botHP = 100;
        this.updateBattleUI();
    }

    updateBattleUI() {
        document.getElementById("player-hp").textContent = this.playerHP;
        document.getElementById("bot-hp").textContent = this.botHP;
    }

    logAction(text) {
        let log = document.getElementById("battle-log");
        log.innerHTML += `<p>${text}</p>`;
    }

    playerAttackAction() {
        if (!this.isPlayerTurn) return;
        let damage = 10 * this.playerDamageBoost;
        if (Math.random() < this.botBlockChance) {
            this.logAction("üõ°Ô∏è –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —É–¥–∞—Ä!");
        } else {
            this.botHP -= damage;
            this.logAction(`‚öîÔ∏è –¢—ã –∞—Ç–∞–∫–æ–≤–∞–ª! –£—Ä–æ–Ω: ${damage}`);
        }
        this.endPlayerTurn();
    }

    biteAction() {
        if (!this.isPlayerTurn) return;
        this.playerDamageBoost += 0.5;
        this.logAction("ü¶∑ –¢—ã —â–µ–ª–∫–Ω—É–ª –∑—É–±–∞–º–∏! –£—Ä–æ–Ω —É–≤–µ–ª–∏—á–µ–Ω.");
        this.endPlayerTurn();
    }

    clawAction() {
        if (!this.isPlayerTurn) return;
        this.botBlockChance -= 0.1;
        this.logAction("üêæ –¢—ã –≤—ã—Ç–∞—â–∏–ª –∫–æ–≥—Ç–∏! –®–∞–Ω—Å –±–ª–æ–∫–∞ –±–æ—Ç–∞ —É–º–µ–Ω—å—à–µ–Ω.");
        this.endPlayerTurn();
    }

    surrender() {
        alert("–•–æ–º—è–∫–∏ –Ω–µ —Å–¥–∞—é—Ç—Å—è!");
    }

    endPlayerTurn() {
        this.updateBattleUI();
        if (this.botHP <= 0) {
            this.winBattle();
        } else {
            this.isPlayerTurn = false;
            setTimeout(() => this.botTurn(), 1500);
        }
    }

    botTurn() {
        if (Math.random() < 0.2) {
            this.logAction("üòµ –ë–æ—Ç —É–ø–∞–ª –∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ö–æ–¥!");
        } else if (Math.random() < 0.3) {
            this.logAction("ü¶∑ –ë–æ—Ç —â–µ–ª–∫–Ω—É–ª –∑—É–±–∞–º–∏! –ï–≥–æ —É—Ä–æ–Ω —É–≤–µ–ª–∏—á–µ–Ω.");
        } else {
            let damage = 10;
            if (Math.random() < 0.2) {
                this.logAction("üõ°Ô∏è –¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —É–¥–∞—Ä!");
            } else {
                this.playerHP -= damage;
                this.logAction(`ü§ñ –ë–æ—Ç –∞—Ç–∞–∫–æ–≤–∞–ª! –£—Ä–æ–Ω: ${damage}`);
            }
        }

        this.updateBattleUI();
        if (this.playerHP <= 0) {
            this.loseBattle();
        } else {
            this.isPlayerTurn = true;
        }
    }

    winBattle() {
        alert("–¢—ã –ø–æ–±–µ–¥–∏–ª! –î–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω –≤ 2 —Ä–∞–∑–∞.");
        game.clickPower *= 2;
        this.endBattle();
    }

    loseBattle() {
        alert("–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.");
        this.endBattle();
    }

    endBattle() {
        document.getElementById("battle-container").style.display = "none";
        document.getElementById("game-title").style.display = "block";
        document.getElementById("balance-display").style.display = "block";
        document.getElementById("click-button").style.display = "block";
        document.getElementById("businesses-title").style.display = "block";
        document.getElementById("business-container").style.display = "block";
        document.getElementById("start-battle").style.display = "block";
    }
}

const game = new Game();
const pvpGame = new PvpGame();
