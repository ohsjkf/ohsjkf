// –°–æ–∑–¥–∞—ë–º –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É
class Game {
    constructor() {
        this.money = parseInt(localStorage.getItem("money")) || 0;
        this.clickPower = parseInt(localStorage.getItem("clickPower")) || 1;
        this.clickUpgradeCost = parseInt(localStorage.getItem("clickUpgradeCost")) || 20;
        this.cards = JSON.parse(localStorage.getItem("cards")) || [
            { name: "–ú–∞–ª–µ–Ω—å–∫–∏–π —Ö–æ–º—è–∫", cost: 10, income: 1, count: 0 },
            { name: "–°—Ä–µ–¥–Ω–∏–π —Ö–æ–º—è–∫", cost: 50, income: 5, count: 0 },
            { name: "–ë–æ–ª—å—à–æ–π —Ö–æ–º—è–∫", cost: 200, income: 20, count: 0 }
        ];
        this.init();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateUI() {
        document.getElementById("money").innerText = this.money;
        document.getElementById("click-power").innerText = this.clickPower;
        document.getElementById("click-upgrade-cost").innerText = this.clickUpgradeCost;
        localStorage.setItem("money", this.money);
        localStorage.setItem("clickPower", this.clickPower);
        localStorage.setItem("clickUpgradeCost", this.clickUpgradeCost);
        localStorage.setItem("cards", JSON.stringify(this.cards));

        let container = document.getElementById("cards-container");
        container.innerHTML = "";
        this.cards.forEach((card, index) => {
            let cardElement = document.createElement("div");
            cardElement.classList.add("card");
            cardElement.innerHTML = `
                <h3>${card.name}</h3>
                <p>üí∞ –¶–µ–Ω–∞: ${card.cost} –º–æ–Ω–µ—Ç</p>
                <p>üìà –î–æ—Ö–æ–¥: +${card.income} –º–æ–Ω–µ—Ç/—Å–µ–∫</p>
                <p>üõí –ö—É–ø–ª–µ–Ω–æ: ${card.count}</p>
                <button onclick="game.buyCard(${index})">–ö—É–ø–∏—Ç—å</button>
            `;
            container.appendChild(cardElement);
        });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å–≥–∏ –∑–∞ –∫–ª–∏–∫
    earnMoney() {
        this.money += this.clickPower;
        this.updateUI();
    }

    // –ü–æ–∫—É–ø–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É–ª—É—á—à–µ–Ω–∏—è
    buyCard(index) {
        if (this.money >= this.cards[index].cost) {
            this.money -= this.cards[index].cost;
            this.cards[index].count++;
            this.updateUI();
        } else {
            alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
        }
    }

    // –£–ª—É—á—à–µ–Ω–∏–µ –∫–ª–∏–∫–æ–≤
    upgradeClick() {
        if (this.money >= this.clickUpgradeCost) {
            this.money -= this.clickUpgradeCost;
            this.clickPower *= 2;  // –£–¥–≤–∞–∏–≤–∞–µ–º —Å–∏–ª—É –∫–ª–∏–∫–∞
            this.clickUpgradeCost *= 2;  // –£–¥–≤–∞–∏–≤–∞–µ–º —Ü–µ–Ω—É —É–ª—É—á—à–µ–Ω–∏—è
            this.updateUI();
        } else {
            alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
        }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥
    generateIncome() {
        this.cards.forEach(card => {
            this.money += card.count * card.income;
        });
        this.updateUI();
    }

    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    init() {
        document.body.innerHTML = `
            <h1>üåø Green Hamster Clicker üåø</h1>
            <p class="money">üí∞ –ë–∞–ª–∞–Ω—Å: <span id="money">0</span> –º–æ–Ω–µ—Ç</p>
            <button onclick="game.earnMoney()">üêπ –ö–ª–∏–∫–Ω—É—Ç—å (+<span id="click-power">1</span> –º–æ–Ω–µ—Ç–∞)</button>
            <h2>–£–ª—É—á—à–µ–Ω–∏–µ –∫–ª–∏–∫–æ–≤</h2>
            <p>üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∑–∞ –∫–ª–∏–∫</p>
            <p>üí∞ –¶–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è: <span id="click-upgrade-cost">20</span> –º–æ–Ω–µ—Ç</p>
            <button onclick="game.upgradeClick()">–£–ª—É—á—à–∏—Ç—å –∫–ª–∏–∫</button>
            <h2>–ö–∞—Ä—Ç–æ—á–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π</h2>
            <div id="cards-container"></div>
        `;

        this.updateUI();
        setInterval(() => this.generateIncome(), 1000);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
const game = new Game();
