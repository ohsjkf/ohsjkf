// –ö–ª–∏–∫–µ—Ä
class Game {
    constructor() {
        this.money = parseInt(localStorage.getItem("money")) || 0;
        this.clickPower = parseInt(localStorage.getItem("clickPower")) || 1;
        this.clickUpgradeCost = parseInt(localStorage.getItem("clickUpgradeCost")) || 20;
        this.updateUI();
    }

    updateUI() {
        document.getElementById("money").innerText = this.money;
        document.getElementById("click-power").innerText = this.clickPower;
        document.getElementById("click-upgrade-cost").innerText = this.clickUpgradeCost;
        localStorage.setItem("money", this.money);
        localStorage.setItem("clickPower", this.clickPower);
        localStorage.setItem("clickUpgradeCost", this.clickUpgradeCost);
    }

    earnMoney() {
        this.money += this.clickPower;
        this.updateUI();

        if (this.money >= 1000000) {
            alert("–¢—ã —Ç–µ–ø–µ—Ä—å —Ö–æ–º—è–∫-–º–∏–ª–ª–∏–æ–Ω–µ—Ä, –Ω–æ –∏–∑-–∑–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π —Ç–µ–±–µ —Å—Ç–∞–ª–æ –ø–ª–æ—Ö–æ...");
            alert("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.");
            this.resetBalance();
        }
    }

    upgradeClick() {
        if (this.money >= this.clickUpgradeCost) {
            this.money -= this.clickUpgradeCost;
            this.clickPower *= 2;
            this.clickUpgradeCost *= 2;
            this.updateUI();
        } else {
            alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
        }
    }

    resetBalance() {
        this.money = 0;
        this.clickPower = 1;
        this.clickUpgradeCost = 20;
        this.updateUI();
        alert("–ë–∞–ª–∞–Ω—Å –æ–±–Ω—É–ª—ë–Ω!");
    }
}

// –ë–æ–π –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞
class PvPGame {
    constructor() {
        this.playerHP = 100;
        this.botHP = 100;
        this.playerAttack = 10;
        this.botAttack = 8;
        this.botBlockChance = 0.3;
        this.criticalHitChance = 0.1;
        this.fallChance = 0.1;
        this.canAct = true; // –ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏
        this.updateUI();
    }

    updateUI() {
        document.getElementById("player-hp").innerText = this.playerHP;
        document.getElementById("bot-hp").innerText = this.botHP;
    }

    startBattle() {
        document.getElementById("start-battle").style.display = "none";
        document.getElementById("battle-container").style.display = "block";
    }

    checkFall() {
        if (Math.random() < this.fallChance) {
            alert("üòµ –•–æ–º—è–∫ —É–ø–∞–ª! –¢—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ—à—å —Ö–æ–¥...");
            this.botTurn();
            return true;
        }
        return false;
    }

    playerAttackAction() {
        if (!this.canAct) return;
        this.disableActions();

        if (this.checkFall()) return;

        let damage = this.playerAttack;
        let isCritical = Math.random() < this.criticalHitChance;

        if (isCritical) {
            damage *= 2;
            alert("‚ö° –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä! –£—Ä–æ–Ω —É–¥–≤–æ–µ–Ω!");
        }

        let botBlocked = Math.random() < this.botBlockChance;

        if (botBlocked) {
            alert("ü§ñ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞—Ç–∞–∫—É!");
        } else {
            this.botHP -= damage;
            alert(`üí• –¢—ã —É–¥–∞—Ä–∏–ª –±–æ—Ç–∞ –Ω–∞ ${damage} —É—Ä–æ–Ω–∞!`);
        }

        this.checkGameOver();
        if (this.botHP > 0) setTimeout(() => this.botTurn(), 3000);
    }

    botTurn() {
        if (!this.canAct) return;
        this.disableActions();

        setTimeout(() => {
            if (Math.random() < this.fallChance) {
                alert("ü§ñ –ë–æ—Ç —É–ø–∞–ª! –û–Ω –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ö–æ–¥.");
                this.enableActions();
                return;
            }

            this.playerHP -= this.botAttack;
            alert(`ü§ñ –ë–æ—Ç –∞—Ç–∞–∫–æ–≤–∞–ª —Ç–µ–±—è –Ω–∞ ${this.botAttack} —É—Ä–æ–Ω–∞!`);
            this.checkGameOver();
            this.enableActions();
        }, 3000);
    }

    biteAction() {
        if (!this.canAct) return;
        this.disableActions();

        if (this.checkFall()) return;
        this.playerAttack += 5;
        alert("ü¶∑ –¢—ã —â–µ–ª–∫–Ω—É–ª –∑—É–±–∞–º–∏! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —É—Ä–æ–Ω —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 5!");

        setTimeout(() => this.botTurn(), 3000);
    }

    clawAction() {
        if (!this.canAct) return;
        this.disableActions();

        if (this.checkFall()) return;
        this.botBlockChance = 0.1;
        alert("üêæ –¢—ã –≤—ã—Ç–∞—â–∏–ª –∫–æ–≥—Ç–∏! –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —Ö—É–∂–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞—Ç–∞–∫–∏.");

        setTimeout(() => this.botTurn(), 300
